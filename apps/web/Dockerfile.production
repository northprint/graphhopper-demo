# Build stage
FROM node:20-alpine AS builder

# Install pnpm and required build tools
RUN apk add --no-cache python3 make g++ && \
    corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy root package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./

# Copy app specific package.json
COPY apps/web/package.json ./apps/web/

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy app source
COPY apps/web ./apps/web

# Set PUBLIC_GRAPHHOPPER_URL for build time
ENV PUBLIC_GRAPHHOPPER_URL=https://graphhopper-api.example.com

# Build the app
WORKDIR /app
RUN pnpm --filter @graphhopper-demo/web build

# Production stage
FROM node:20-alpine AS production

# Install pnpm for production
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy package files
COPY --from=builder /app/package.json /app/pnpm-lock.yaml /app/pnpm-workspace.yaml ./
COPY --from=builder /app/apps/web/package.json ./apps/web/

# Install production dependencies
RUN pnpm install --frozen-lockfile --prod --filter @graphhopper-demo/web

# Copy built app
COPY --from=builder /app/apps/web/build ./apps/web/build

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3000/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Set environment variables
ENV NODE_ENV=production
ENV PORT=3000

# Start the server
CMD ["node", "apps/web/build"]